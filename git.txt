
	Git是一种分布式版本控制系统
	git init ---把一个目录变成Git可以管理的仓库(repository)---初始化
	git add test.txt --把文件添加到仓库，可以反复多次使用，添加多个文件
	git commit -m "some msg"  ---把文件提交到仓库，一次性把add命令添加的文件提交
	git status ----查看仓库当前状态
	git diff text.txt ---查看difference
	git  log ---显示从最近到最远的提交日志 如果输出信息过多，试试加上【--pretty=oneline】参数，结合git reset 命令方便回退到过去某个版本
	git reset --hard commit_id   ----回到某个提交的版本 HEAD指向的版本就是当前版本 HEAD^表示上一个版本
	git reflog   ---查看历史命令，可以找到每个版本的commit_id,结合git reset命令方便回到未来某一个版本
	工作区 即通过git init初始化的工作目录。工作区下有一个【.git】隐藏目录,它是Git的版本库，里面存储了很多
	东西，最重要的就是称为stage(或者叫index)的暂存区，还有默认分支master以及指向master的指针HEAD
	git add 命令实际上就是把文件修改添加到暂存区
	git commit 提交更改，实际上就是把暂存区的所有内容提交到当前分支
	git checkout -- readme.txt    ------把readme.txt文件在【工作区】的修改全部撤销或者当前文件不存在时把版本库中的文件checkout到工作区
	git reset HEAD readme.txt   ----把【暂存区】的修改撤销，git reset命令既可以回退版本，也可以回退暂存区的修改到工作区
	场景1：当你改乱了工作区的某个文件，想直接丢弃工作区的修改时，用命令git checkout -- readme.txt
	场景2：当你不但乱改了工作区的某个文件，并且还添加到了暂存区，想丢弃修改，分两步，第一步用命令git reset HEAD readme.txt,回到场景1，第二步按场景1操作
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，git reset版本回退
	git rm text.txt => git commit  ---从版本库中删除该文件
	test
	git remote add origin https://github.com/username/git-repo.git   ----关联一个远程库
	git push -u origin master  ---第一次推送master分支的所有内容
	git push origin master  ---推送最新修改的内容
	git clone https://github.com/username/git-repo.git  ----克隆远程仓库到本地
	git checkout -b dev   ----创建dev分支，然后切换到dev分支，相当于执行以下两条命令
	git branch dev ---创建dev分支
	git checkout dev   ---切换到dev分支
	git branch   ----列出所有分支，当前分支前面会标一个*号
	git merge dev    -----合并dev分支到当前分支
	git branch -d dev   ---删除dev分支
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	git log --graph   ---此命令可以看到分支合并图
	git merge --no-ff -m "some message" dev   ---- 【--no-ff】参数表示禁用Fast forward模式合并分支
	git stash    ---保存当前工作现场，等以后恢复现场后继续工作
	git stash list  ----查看保存的工作现场
	git stash apply   ---恢复工作现场，但stash内容并不删除，需要用git stash drop来删除
	git stash pop    -------恢复的同时把stash内容也删了

    test
    test